/*
 * Copyright 2023 Kaleyra @ https://www.kaleyra.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id "com.android.library"
    id "kotlin-android"
    id "kotlin-android-extensions"
    id "kotlin-kapt"
    id "kotlinx-serialization"
}

android {

    compileSdkVersion catalog.versions.releaseAppSdkVersion.get().toInteger()
    buildToolsVersion catalog.versions.releaseAppToolsVersion.get()

    defaultConfig {
        minSdkVersion catalog.versions.minSdkVersion.get().toInteger()
        targetSdkVersion catalog.versions.releaseAppSdkVersion.get().toInteger()
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    implementation(platform("com.kaleyra:bom:1"))

    /*** Platform ***/
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "org.jetbrains.kotlin:kotlin-reflect:"
    api "androidx.core:core-ktx"
    api "androidx.appcompat:appcompat"
    api "androidx.fragment:fragment-ktx"
    api "androidx.multidex:multidex"
    implementation "androidx.lifecycle:lifecycle-common-java8"
    api "com.google.android.material:material"

    /*** UI ***/
    api "androidx.recyclerview:recyclerview"
    api "com.mikepenz:fastadapter"
    api ("com.robertlevonyan.view:MaterialExpansionPanel") {
        exclude module: 'constraintlayout'
    }
    api "androidx.swiperefreshlayout:swiperefreshlayout"

    /*** Testing ***/
    testImplementation "junit:junit"
    androidTestImplementation "androidx.test.ext:junit"
    androidTestImplementation "androidx.test.espresso:espresso-core"

    /*** Networking ***/
    api "com.squareup.okhttp3:okhttp"
    implementation "io.ktor:ktor-client-core"
    implementation "io.ktor:ktor-client-cio"
    implementation "io.ktor:ktor-client-content-negotiation"
    implementation "io.ktor:ktor-serialization-kotlinx-json"
    implementation "io.ktor:ktor-client-okhttp"

    /*** Utility ***/
    implementation "com.jakewharton:process-phoenix"
    debugImplementation "com.facebook.flipper:flipper"
    debugImplementation "com.facebook.soloader:soloader"
    debugImplementation "com.facebook.flipper:flipper-leakcanary2-plugin"
    debugImplementation "com.bandyer.flipper:flipper-socket-io-plugin"
    debugImplementation "com.facebook.flipper:flipper-network-plugin"
    releaseImplementation "com.facebook.flipper:flipper-noop"

    /*** Debug leaks ***/
    debugImplementation "com.squareup.leakcanary:leakcanary-android"

    /*** Crashlytics ***/
    compileOnly "com.google.firebase:firebase-crashlytics-ndk"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json"

    /*** FCM setup ***/
    compileOnly "com.google.firebase:firebase-messaging"

    /*** Pushy notification service, useful for China ***/
    compileOnly "me.pushy:sdk"
    compileOnly "com.huawei.hms:push"

    implementation project(':app-configuration')
    implementation project(":app-design")
}